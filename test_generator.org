* Notes April 2025
** Extended state idea

In addition to the states of the nodes, the idea that the cluster is "armed" means that the leader
is in contact with a quorum (n/2) of nodes so it can issue log updates.

In this way the total state of the cluster can be represented as tuples of log states, one for each
node

1. last index
2. last term
3. commit index
4. current term
5. leader_id
6. run state
7. network segment id (symbolic, where 1 is the original fully connected network)
8. unpaired sends (msg sent, no reply yet) (Not cleared by crash or partition)
9. unhandled msg (in message pending) (cleared by crash or partition)
   

So if the leader has a normal run state and the same network segment id as at least n/2 other nodes, the
cluster is "armed". This can be a function somewhere so it isn't a pain to check

So for running the tests, I probably want the current cluster state object to but updated to something
that stores everything in a clean way (probably does already) and that has functions such as "is_armed"
and "transition_legal" to check to see if to cluster states are reachable in time forward direction.

The goal here is to build a test generator, so we want these classes to be able to evaluate the
state and the chain of actions that can lead from one to the other. This chain of actions thing
is sticky. Maybe need a specific Transition class that encodes everything, start state, end state
and chain of actions. Then the action classes can look at the Transition class and give yes/no
on whether they can be applied at the end of the chain. Then the generator can run through all
possible actions at each link in the chain. This also means that the action needs to specify
what effect, if any, the action has one the state. Maybe it can't be an action in this model
unless it affects the state as defined above. 

Actions need to be able to evaluate whether they are legal given a cluster state.

Messages need to be able to check their legality, though this may require that the
message be part of a chain of messages. For example, a vote response message is only
possible after a vote request. This state is not present in the state definition above,
though it is present in the node state object in the cluster state. Perhaps I need to add
something to the state like "unpaired message". If I do, I should probably add something
like a "pipe" object to represent the connection between two nodes. Maybe store S_RPC for
start of RPC, E_RPC for end of RPC, with message type and addresses. This would represent
the movement of the messages (RPC parts) and not the processing status at the target.
Maybe the action class needs to be S_RPC or E_RPC base class.



   

*** Actions

 *N = nodes in full cluster*
 *M = nodes on majority network*
 *I = nodes on minority network*


| R | Operation         | Caused by msg  | Causes Message        | Changes log state   | Changes Role | Changes network state    | Changes Run State |
| F | Start Campaign    |                | Request Vote * N -1   | Term + 1            | to Candidate |                          |                   |
| F | Vote              | request vote   | Vote Response         | Term + 1            |              |                          |                   |
| C | Resign 1          | yes vote < n/2 |                       |                     | to Follower  |                          |                   |
| C | Resign 2          | timeout        |                       |                     | to Follower  |                          |                   |
| C | Resign 3          | any > term     |                       | Term + X            | to Follower  |                          |                   |
| L | New term          | any > term     |                       | Term + X            | to Follower  |                          |                   |
| F | New term          | any > term     |                       | Term + X            |              |                          |                   |
| A | Crash             |                |                       |                     |              | unreachable              | stopped           |
| A | Recover           |                |                       |                     | to Follower  | reachable or partitioned | running           |
| A | Restart nolog     |                |                       | all to zero         | to Follower  | reachable or partitioned | running           |
| A | Net Split         |                |                       |                     |              | move to minority net     |                   |
| A | Net Heal          |                |                       |                     |              | move to majority net     |                   |
| L | Do Command        |                | append entries all    | li+1                |              |                          |                   |
| L | Start Term        | yes vote > n/2 | append entries all    | li+1 lt+1           |              |                          |                   |
| F | Append 1 (HB)     | append entries |                       | lt+0 li+0 c+0       |              |                          |                   |
| F | Append 2 (new)    | append entries |                       | lt+0-X li+1-X c+0-X |              |                          |                   |
| F | Append 3 (commit) | append entries |                       | lt+0-X li+0-X c+1-X |              |                          |                   |
| L | Append Ack        | append resp ok |                       | c+0-X               |              |                          |                   |
| L | Append Nack       | append resp no | append entries target |                     |              |                          |                   |
| L | Heartbeat         |                | append entries        | c+0-1               |              |                          |                   |


Example:

1. Cluster state stable
2. Proposed state new log record at leader and one follower
   
Action Chain Construction,

1. Test all actions against unlinked state change for leader (leader operations always checked first)
   a. Do Command matches
   b. goes on chain
   c. pushes broadcast entries onto unlinked stack
   d. removes leader state change from unlinked heap
2. Test leader actions against unlinked message link (new, pushed from last step)
   1. Push linked messages for each follower onto chain
   2. Push a wait for message action (need to add node target to wait trigger)
3. Test all actions for followers, one at a time
   1. First follower to check state change eventually reaches Append 2 action, which checks to
      see if an append entries message for follower is linked, finds it, so pushes action onto chain
   2. Removes follower state change from unlinked heap

No remaining unclaimed changes, chain complete, can run
 *Note that run will not clear all chain links, only one follower pulled Append 2,*
   *so this should be reflected in cluster state*

1. Cluster state stable
2. Proposed state new log record at all followers but no change for leader

Action Chain Construction
1. No leader in change proposal, so not checked
2. Followers all fail to match because no Append 2 on chain.
 
      
   
   

*** 

** First batch of notes

# Define functions that check to see:
1. The logged state term, last_index, last_term, commit_index, are a legal combination
2. That one legal state can follow another (prevents running backwards when generating, prevents advancing
   last_term but not last_index, last_term <= term)

Then
Generate a set of legal combinations, with differences in each value changing up to three units
    (define logic for this and adjust if needed)

Then:
1. define functions that test two legal log states from above to see if they could be present on two
   servers at the same same, based on the servers role  and network membership
   Can define network membership as 0 = crashed, 1 = majority network, 2,3,4 etc means minority network partition number
   See if it is possible to design and alogythm, or if it has to be table driven. Try hard with the algo.
2. Either document reason that checking each pair is enough, or add a function that compares all three.
3. Generate all the legal combinations from above.

Then:
1. Define the legal actions that can happen to a server that are not RAFT messages "action code"
   10. Becomes leader, follower or candidate
   12. Candidate election timeout, retry
   20. Receives user command (only as leader, no state transitions happen otherwise)
   30. Crash soft (log retained)
   40. Crash hard (log lost)
   50. Switches network from majority(1) to minority 2 or 3 (4 is probably not needed)

Then:
1. define a function that tests to see if one state for three servers could legally follow the previous
   state. This needs to be able to analize whether commit could happen. It needs to understand what
   effect crashes have, and what effects partitions have. So it would look at the "action code". 

Build a tool that uses generated states and network and roles and turns it into a series of messages and actions
from one state to the next.



anomalies: Partition, Crash
victims: Leader, follower, candidate
pre-anomaly cluster state: stable, (one candidate multiple candidates) X (from stable, from leaderless)
pre-anomaly command state: none, some committed, none committed but some active, some committed and some active
in-anomaly Majority network: old leader, no leader, new leader, multiterm election
in-anomaly minority network: all crashed so no action, old_leader, no leader, quiet, try election, multiterm election
in-anomaly command ops: none, actual leader only, ex-leader (isolated) only, 2 leader overlap
in-anomaly config ops: none, add server, remove server
exiting anomaly majority net: stable, election in progress
exiting anomaly minority net: ex-leader alive, followers only, candidate(s) running, recovering server(s)
exiting server log states:

enum cluster_states
     all_stable
     net_split
     some_crashed

enum net pop(ulation):  (one for each current network)
   no quorum
   quorum  (but partial)
   complete
   
enum net state:  (one for each current network)
   starting
   stable	 
   electing (only one candidate)
   contesting_election (multiple candidates)

enum log_state:
     no commands
     committed commands
     pending commands
     pending and committed commands
     
anomaly start:
   net_state
   victim_list (e.g. leader, follower, candidate)
   anomaly type (partition or crash)
   log_replication state: inactive, leader local only, all but victim saved, all but victim committed

anomaly_server_phase:
	server_id
	required role (follower, candidate, leader)
	serial
	net (majority, minority)
	action (crash, stay crashed, restart, change to min network, change to maj network,
	       start election, re-start election, queue command, add server, remove server)

anomaly_cluster_phase:
	list of anomaly_server_phase, server missing implies it has no action

anomaly end: (implies all phases complete)
   This is a checklist tool to ensure anomaly phases did what you think they should do
   server roles dict  (maybe a flag to say just restarted?)
   server log states dict: term, last_index, last_term, optional log tail of X records
   net state 
   
XS													x
| Epoc     | Maj Net State | Min Net State | S1                                  |
| Pre      | stable        | None          | leader, pIndx=1 pTerm=1 term=1 ci=1 |
|          | quorum        | None          |                                     |
| Broken   |               |               |                                     |
| Reparing |               |               |                                     |
| Healed   |               |               |                                     |

