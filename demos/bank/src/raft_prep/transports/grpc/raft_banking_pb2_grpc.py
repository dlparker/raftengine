# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import raft_banking_pb2 as raft__banking__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in raft_banking_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BankingServiceStub(object):
    """Banking Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCustomer = channel.unary_unary(
                '/raft_banking.BankingService/CreateCustomer',
                request_serializer=raft__banking__pb2.CreateCustomerRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.CreateCustomerResponse.FromString,
                _registered_method=True)
        self.CreateAccount = channel.unary_unary(
                '/raft_banking.BankingService/CreateAccount',
                request_serializer=raft__banking__pb2.CreateAccountRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.CreateAccountResponse.FromString,
                _registered_method=True)
        self.Deposit = channel.unary_unary(
                '/raft_banking.BankingService/Deposit',
                request_serializer=raft__banking__pb2.DepositRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.DepositResponse.FromString,
                _registered_method=True)
        self.Withdraw = channel.unary_unary(
                '/raft_banking.BankingService/Withdraw',
                request_serializer=raft__banking__pb2.WithdrawRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.WithdrawResponse.FromString,
                _registered_method=True)
        self.Transfer = channel.unary_unary(
                '/raft_banking.BankingService/Transfer',
                request_serializer=raft__banking__pb2.TransferRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.TransferResponse.FromString,
                _registered_method=True)
        self.CashCheck = channel.unary_unary(
                '/raft_banking.BankingService/CashCheck',
                request_serializer=raft__banking__pb2.CashCheckRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.CashCheckResponse.FromString,
                _registered_method=True)
        self.ListAccounts = channel.unary_unary(
                '/raft_banking.BankingService/ListAccounts',
                request_serializer=raft__banking__pb2.ListAccountsRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.ListAccountsResponse.FromString,
                _registered_method=True)
        self.GetAccounts = channel.unary_unary(
                '/raft_banking.BankingService/GetAccounts',
                request_serializer=raft__banking__pb2.GetAccountsRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.GetAccountsResponse.FromString,
                _registered_method=True)
        self.ListStatements = channel.unary_unary(
                '/raft_banking.BankingService/ListStatements',
                request_serializer=raft__banking__pb2.ListStatementsRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.ListStatementsResponse.FromString,
                _registered_method=True)
        self.AdvanceTime = channel.unary_unary(
                '/raft_banking.BankingService/AdvanceTime',
                request_serializer=raft__banking__pb2.AdvanceTimeRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.AdvanceTimeResponse.FromString,
                _registered_method=True)
        self.RaftMessage = channel.unary_unary(
                '/raft_banking.BankingService/RaftMessage',
                request_serializer=raft__banking__pb2.RaftMessageRequest.SerializeToString,
                response_deserializer=raft__banking__pb2.RaftMessageResponse.FromString,
                _registered_method=True)


class BankingServiceServicer(object):
    """Banking Service Definition
    """

    def CreateCustomer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deposit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Withdraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CashCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStatements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdvanceTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RaftMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BankingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCustomer,
                    request_deserializer=raft__banking__pb2.CreateCustomerRequest.FromString,
                    response_serializer=raft__banking__pb2.CreateCustomerResponse.SerializeToString,
            ),
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=raft__banking__pb2.CreateAccountRequest.FromString,
                    response_serializer=raft__banking__pb2.CreateAccountResponse.SerializeToString,
            ),
            'Deposit': grpc.unary_unary_rpc_method_handler(
                    servicer.Deposit,
                    request_deserializer=raft__banking__pb2.DepositRequest.FromString,
                    response_serializer=raft__banking__pb2.DepositResponse.SerializeToString,
            ),
            'Withdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.Withdraw,
                    request_deserializer=raft__banking__pb2.WithdrawRequest.FromString,
                    response_serializer=raft__banking__pb2.WithdrawResponse.SerializeToString,
            ),
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=raft__banking__pb2.TransferRequest.FromString,
                    response_serializer=raft__banking__pb2.TransferResponse.SerializeToString,
            ),
            'CashCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.CashCheck,
                    request_deserializer=raft__banking__pb2.CashCheckRequest.FromString,
                    response_serializer=raft__banking__pb2.CashCheckResponse.SerializeToString,
            ),
            'ListAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccounts,
                    request_deserializer=raft__banking__pb2.ListAccountsRequest.FromString,
                    response_serializer=raft__banking__pb2.ListAccountsResponse.SerializeToString,
            ),
            'GetAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccounts,
                    request_deserializer=raft__banking__pb2.GetAccountsRequest.FromString,
                    response_serializer=raft__banking__pb2.GetAccountsResponse.SerializeToString,
            ),
            'ListStatements': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStatements,
                    request_deserializer=raft__banking__pb2.ListStatementsRequest.FromString,
                    response_serializer=raft__banking__pb2.ListStatementsResponse.SerializeToString,
            ),
            'AdvanceTime': grpc.unary_unary_rpc_method_handler(
                    servicer.AdvanceTime,
                    request_deserializer=raft__banking__pb2.AdvanceTimeRequest.FromString,
                    response_serializer=raft__banking__pb2.AdvanceTimeResponse.SerializeToString,
            ),
            'RaftMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.RaftMessage,
                    request_deserializer=raft__banking__pb2.RaftMessageRequest.FromString,
                    response_serializer=raft__banking__pb2.RaftMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raft_banking.BankingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raft_banking.BankingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BankingService(object):
    """Banking Service Definition
    """

    @staticmethod
    def CreateCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/CreateCustomer',
            raft__banking__pb2.CreateCustomerRequest.SerializeToString,
            raft__banking__pb2.CreateCustomerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/CreateAccount',
            raft__banking__pb2.CreateAccountRequest.SerializeToString,
            raft__banking__pb2.CreateAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Deposit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/Deposit',
            raft__banking__pb2.DepositRequest.SerializeToString,
            raft__banking__pb2.DepositResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Withdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/Withdraw',
            raft__banking__pb2.WithdrawRequest.SerializeToString,
            raft__banking__pb2.WithdrawResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/Transfer',
            raft__banking__pb2.TransferRequest.SerializeToString,
            raft__banking__pb2.TransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CashCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/CashCheck',
            raft__banking__pb2.CashCheckRequest.SerializeToString,
            raft__banking__pb2.CashCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/ListAccounts',
            raft__banking__pb2.ListAccountsRequest.SerializeToString,
            raft__banking__pb2.ListAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/GetAccounts',
            raft__banking__pb2.GetAccountsRequest.SerializeToString,
            raft__banking__pb2.GetAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListStatements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/ListStatements',
            raft__banking__pb2.ListStatementsRequest.SerializeToString,
            raft__banking__pb2.ListStatementsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AdvanceTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/AdvanceTime',
            raft__banking__pb2.AdvanceTimeRequest.SerializeToString,
            raft__banking__pb2.AdvanceTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RaftMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raft_banking.BankingService/RaftMessage',
            raft__banking__pb2.RaftMessageRequest.SerializeToString,
            raft__banking__pb2.RaftMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
