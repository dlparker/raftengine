* Test test_follower_explodes_in_command from file tests/test_commands_1.py


    This tests that operations are correct in the case where the state machine operation at a single
    follower experiences an error during command execution, one that does not crash the node.

    The items that are tested are that
    1. The command succeeds because the leader and one follower agree
    2. That the follower will retry the command next time it gets a heartbeat 
    

    There is no discussion in the Raft paper about the possibility that the state machine command
    processing could experience an error that does not crash the node, but also does not
    allow the command to be processed. I guess they were thinking about compliled languages
    that are more likely to crash the process on some serious bug than to detect the bug and try
    to continue, but this is python which might well have such behavior. I guess it might not
    then be technically a "state machine", but anything more complex than storing a value (like
    etcd) is likely to have the possibilty of this kind of failure.

    Rather than try to develop some general mechanism for dealing with this, I throw up my
    hands and just promise to let you know if it fails at the leader. If that happens then
    the log record is not committed, so your job is to figure out how to clear the problem condition
    and retry.

    If it happens at a single follower then that may be okay, if there was more than a quorum, since enough
    other nodes applied it successfully that the cluster can move on even if the follower continues to
    fail to apply. There is not yet a mechanism for reporting the error at a follower, but when there is
    will be local to the follower, and some external action will need to be taken to allow that follower
    to finish the commit and move on. If the follower was part of a minimum quorum, your whole cluster
    will be blocked until you fix it.

    This test fixed the simulated problem so that the first retry succeeds.
    
    Timers are disabled, so all timer driven operations such as heartbeats are manually triggered.
    


 *[[condensed Trace Table Legend][Table legend]] located after last table in file*

** Initial election, normal
------------------------------------------------------------------------------------------------------------------------------
| event | N-1   | N-1                              | N-1       | N-2   | N-2      | N-2       | N-3   | N-3      | N-3       |
| node  | Role  | Op                               | Delta     | Role  | Op       | Delta     | Role  | Op       | Delta     |
|  N-1  | FLWR  | STARTED                          |           | FLWR  | STARTED  |           | FLWR  | STARTED  |           |
|  N-1  | CNDI  | NEW ROLE                         | t=1       | FLWR  |          |           | FLWR  |          |           |
|  N-1  | CNDI  | give_vote->N-2 term=1 li=0 lt=1  |           | FLWR  |          |           | FLWR  |          |           |
|  N-1  | CNDI  | give_vote->N-3 term=1 li=0 lt=1  |           | FLWR  |          |           | FLWR  |          |           |
|  N-1  | CNDI  | N-2->vote-> yes=True             |           | FLWR  |          | t=1       | FLWR  |          | t=1       |
|  N-1  | LEAD  | NEW ROLE                         | lt=1 li=1 | FLWR  |          |           | FLWR  |          |           |
|  N-1  | LEAD  | entries->N-2 li=0 lt=0 ec=1 ci=0 |           | FLWR  |          |           | FLWR  |          |           |
|  N-1  | LEAD  | entries->N-3 li=0 lt=0 ec=1 ci=0 |           | FLWR  |          |           | FLWR  |          |           |
|  N-1  | LEAD  | N-3->vote-> yes=True             |           | FLWR  |          |           | FLWR  |          |           |
|  N-1  | LEAD  | N-2->ent_reply-> ok=True mi=1    |           | FLWR  |          | lt=1 li=1 | FLWR  |          | lt=1 li=1 |
|  N-1  | LEAD  | N-3->ent_reply-> ok=True mi=1    | ci=1      | FLWR  |          |           | FLWR  |          |           |
|  N-1  | LEAD  | CMD START                        |           | FLWR  |          |           | FLWR  |          |           |
|  N-1  | LEAD  | entries->N-2 li=1 lt=1 ec=1 ci=1 | li=2      | FLWR  |          |           | FLWR  |          |           |
|  N-1  | LEAD  | entries->N-3 li=1 lt=1 ec=1 ci=1 |           | FLWR  |          |           | FLWR  |          |           |
|  N-1  | LEAD  | N-2->ent_reply-> ok=True mi=2    |           | FLWR  |          | li=2      | FLWR  |          | li=2      |
|  N-1  | LEAD  | N-3->ent_reply-> ok=True mi=2    |           | FLWR  |          |           | FLWR  |          |           |
|  N-1  | LEAD  | CMD DONE                         | ci=2      | FLWR  |          | ci=2      | FLWR  |          | ci=2      |
------------------------------------------------------------------------------------------------------------------------------
** Node 1 is leader, one command completed and all nodes in sync, rigging node 3 to explode processing next command
--------------------------------------------------------------------------------------------------------
| event | N-1   | N-1                              | N-1   | N-2   | N-2 | N-2   | N-3   | N-3 | N-3   |
| node  | Role  | Op                               | Delta | Role  | Op  | Delta | Role  | Op  | Delta |
|  N-1  | LEAD  | CMD START                        |       | FLWR  |     |       | FLWR  |     |       |
|  N-1  | LEAD  | entries->N-2 li=2 lt=1 ec=1 ci=2 | li=3  | FLWR  |     |       | FLWR  |     |       |
|  N-1  | LEAD  | entries->N-3 li=2 lt=1 ec=1 ci=2 |       | FLWR  |     |       | FLWR  |     |       |
|  N-1  | LEAD  | N-2->ent_reply-> ok=True mi=2    |       | FLWR  |     | li=3  | FLWR  |     |       |
|  N-1  | LEAD  | N-2->ent_reply-> ok=True mi=3    |       | FLWR  |     |       | FLWR  |     |       |
|  N-1  | LEAD  | CMD DONE                         | ci=3  | FLWR  |     | ci=3  | FLWR  |     |       |
|  N-1  | LEAD  | N-2->ent_reply-> ok=True mi=3    |       | FLWR  |     |       | FLWR  |     | li=3  |
|  N-1  | LEAD  | N-3->ent_reply-> ok=True mi=2    |       | FLWR  |     |       | FLWR  |     |       |
|  N-1  | LEAD  | N-3->ent_reply-> ok=True mi=3    |       | FLWR  |     |       | FLWR  |     |       |
|  N-1  | LEAD  | N-3->ent_reply-> ok=True mi=3    |       | FLWR  |     |       | FLWR  |     |       |
--------------------------------------------------------------------------------------------------------
** Second command succeed, but not at node3. Disarming bomb and sending hearbeats, should cause run and commit
--------------------------------------------------------------------------------------------------------
| event | N-1   | N-1                              | N-1   | N-2   | N-2 | N-2   | N-3   | N-3 | N-3   |
| node  | Role  | Op                               | Delta | Role  | Op  | Delta | Role  | Op  | Delta |
|  N-1  | LEAD  | entries->N-2 li=3 lt=1 ec=0 ci=3 |       | FLWR  |     |       | FLWR  |     |       |
|  N-1  | LEAD  | N-2->ent_reply-> ok=True mi=3    |       | FLWR  |     |       | FLWR  |     |       |
|  N-1  | LEAD  | entries->N-3 li=3 lt=1 ec=0 ci=3 |       | FLWR  |     |       | FLWR  |     |       |
|  N-1  | LEAD  | N-3->ent_reply-> ok=True mi=3    |       | FLWR  |     |       | FLWR  |     | ci=3  |
--------------------------------------------------------------------------------------------------------


* Condensed Trace Table Legend
All the items in these legends labeled N-X are placeholders for actual node id values,
actual values will be N-1, N-2, N-3, etc. up to the number of nodes in the cluster. Yes, One based, not zero.

| Column Label | Description     | Details                                                                                        |
| Event Node   | Triggering node | The id value of the node that experienced the event that triggered this trace row              |
| N-X Role     | Raft Role       | FLWR = Follower CNDI = Candidate LEAD = Leader                                                 |
| N-X Op       | Activity        | Describes a traceable event at this node, see separate table below                             |
| N-X Delta    | State change    | Describes any change in state since previous trace, see separate table below                   |


** "Op" Column detail legend
| Value          | Meaning                                                                                      |
| STARTED        | Simulated node starting with empty log, term=0                                               |
| CMD START      | Simulated client requested that a node (usually leader, but not for all tests) run a command |
| CMD DONE       | The previous requested command is finished, whether complete, rejected, failed, whatever     |
| CRASH          | Simulating node has simulated a crash                                                        |
| RESTART        | Previously crashed node has restarted. Look at delta column to see effects on log, if any    |
| NEW ROLE       | The node has changed Raft role since last trace line                                         |
| NETSPLIT       | The node has been partitioned away from the majority network                                 |
| NETJOIN        | The node has rejoined the majority network                                                   |
| endtries->N-X  | Node has sent append_entries message to N-X, next line in this table explains details        |
| (continued)    | li=1 means prevLogIndex=1, lt=1 means prevLogTerm=1, ci means sender's commitInde            |
| (continued)    | ec=2 means that the entries list in the is 2 items long. ec=0 is a heartbeat                 |
| N-X->ent_reply | Node has received the response to an append_entries message, details in continued lines      |
| (continued)    | ok=(True or False) means that entries were saved or not, mi=3 says log max index = 3         |
| give_vote->N-X | Node has sent request_vote to N-X, term=1 means current term is 1 (continued next line)      |
| (continued)    | li=0 means prevLogIndex = 0, lt=0 means prevLogTerm = 0                                      |
| N-X->vote      | Node has received request_vote response from N-X, yes=(True or False) indicates vote value   |


** "Delta" Column detail legend
Any item in this column indicates that the value of that item has changed since the last trace line

| Item | Meaning                                                                                                                         |
| t=X  | Term has changed to X                                                                                                           |
| lt=X | prevLogTerm has changed to X, indicating a log record has been stored                                                           |
| li=X | prevLogIndex has changed to X, indicating a log record has been stored                                                          |
| ci=X | Indicates commitIndex has changed to X, meaning log record has been committed, and possibly applied depending on type of record |
| n=X  | Indicates a change in networks status, X=1 means re-joined majority network, X=2 means partitioned to minority network          |

** Notes about interpreting traces
The way in which the traces are collected can occasionally obscure what is going on. A case in point is the commit of records at followers.
The commit process is triggered by an append_entries message arriving at the follower with a commitIndex value that exceeds the local
commit index, and that matches a record in the local log. This starts the commit process AFTER the response message is sent. You might
be expecting it to be prior to sending the response, in bound, as is often said. Whether this is expected behavior is not called out
as an element of the Raft protocol. It is certainly not required, however, as the follower doesn't report the commit index back to the
leader.

The definition of the commit state for a record is that a majority of nodes (leader and followers) have saved the record. Once
the leader detects this it applies and commits the record. At some point it will send another append_entries to the followers and they
will apply and commit. Or, if the leader dies before doing this, the next leader will commit by implication when it sends a term start
log record.

So when you are looking at the traces, you should not expect to see the commit index increas at a follower until some other message
traffic occurs, because the tracing function only checks the commit index at message transmission boundaries.






