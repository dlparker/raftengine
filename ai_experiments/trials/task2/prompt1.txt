This Task focuses on improvements to the mechanism that produce output from the unit tests
in this Raft Protocol implementaion library. 

The file "new_format_tool.py" runs a unit test with flags (in dev_tools/pausing_server.py) set to
create test trace output files in two of the available types. One is a .org format file that
contains test description information and also a set of tables that are generated from test trace
data. The other is a .json file that contains the test trace data.

The test naming convention in use is to have one or more files in the tests directory that
contain one or more tests that are associated with a part of the raft implementation.
For this phase the focus will be on a simple test of the leader election process.
the test file is tests/test_elections_1.py and the test function name is test_election_1.
By convention the output of the test tracing are placed in the file system consistent
with the following code:

test_file_part = "test_elections_1"
test_name_part = "test_election_1"
target_test = f"tests/{test_file_part}.py::{test_name_part}"
os.system(f"pytest --verbose -x -s {target_test}")
json_path = Path(f'captures/test_traces/json/{test_file_part}/{test_name_part}.json')
org_path = Path(f'captures/test_traces/no_legend_org/{test_file_part}/{test_name_part}.org')

The goal of the current exercise is to continue the process of improving the code that turns
the trace data into the tables.

The old code can be found in the Shorthand and ShorthandType1 classes in trace_shorthand.py

This code runs at the conclusion of the unit test if the proper flag is True.
This code is complete, but needs improvement to allow for easier maintenance and
for additional formatting options.

The is a limited implementation of a new version of the code that should provide a guide
to completing that new version. This new code is in the NodeStateShortedFormat and
AppendEntriesShortestFormat classes and their base classes.

There is code to run this new version in new_format_tool.py. It loads the
trace data from the json file and then iterates over the trace lines and
applies the new formatting tool to each line.

The first phase of the changes should be:

1. Run the new_format_tool.py and capture the ouput.
2. Review the relationship between the actions of the new code and the old.
3. Create new style MessageFormat class for the "append_response" type message
   that replicates the effect of the ShorthandType1 message_to_trace
   method for this message type. The message type classes can be found
   in the main library source in raftengine/messages. The BaseMessage and
   LogMessage classes are never used directly, they are only in the
   form of child classes. The specific message class needed for this
   phase is AppendReponseMessage class in append_entries.py
4. Update NodeStateShortestFormat to support the new message formatter.
5. Run new_format_tool.py again and validate that the append_response
   messages are formated in the same style as those messages have
   in the .org test output file.
   
