@startuml
!pragma ratio 0.7
skinparam dpi 150
skinparam monochrome false
skinparam sequence {
  ArrowColor Black
  ActorBorderColor Black
  LifeLineBorderColor Black
  ParticipantFontSize 12
  Padding 10
}
skinparam legend {
  backgroundColor #GhostWhite
  entrySeparator #GhostWhite
  FontSize 11
}
title Snapshot Export to Follower

participant "Leader Role" as leader order 10 #Lightgreen
participant Deck as deck order 20 #Coral
participant Pilot as pilot order 30 #Lightblue
participant "State Machine" as app_state order 40 #Lightyellow
database "Raft Log" as raft_log order 50 #Coral
participant "Follower Node" as node order 60 #Lightgreen

leader -> node: ae i=101 t=2
note right: AppendEntries with prevLogIndex
node --> leader: ae_reply ok=False mi=50
note right: Follower’s matchIndex < Leader’s snapshot index
leader -> deck: Need snapshot i=100
deck -> pilot: begin_snapshot_export(i=100, t=2)
pilot -> app_state: begin_snapshot_export(i=100, t=2)
create participant "SnapShotTool" as tool order 35 #Lightblue
app_state --> tool: Create
app_state --> pilot: Return SnapShotTool
pilot --> deck: Return SnapShotTool
loop Send chunks
  deck -> tool: get_snapshot_chunk()
  tool --> deck: Return chunk
  deck -> node: sn i=100 t=2 chunk
end
deck -> tool: get_snapshot_chunk()
tool --> deck: Done
deck -> node: sn i=100 t=2 done
node --> deck: snr s=True
note right: Snapshot transfer complete
deck --> leader: Snapshot sent
destroy tool

legend right
  <#GhostWhite,#GhostWhite>|       |= __Legend__ |
  |<#Lightyellow>| User-defined and implemented|
  |<#Lightblue>| Raft-defined, user-implemented|
  |<#Coral>| Defined and implemented by Raft Engine|
  |<#Lightgreen>| Internal Raft Engine component|
endlegend
@enduml