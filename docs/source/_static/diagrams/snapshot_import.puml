@startuml
!pragma ratio 0.7
skinparam dpi 150
skinparam monochrome false
skinparam sequence {
  ArrowColor Black
  ActorBorderColor Black
  LifeLineBorderColor Black
  ParticipantFontSize 12
  Padding 10
}
skinparam legend {
  backgroundColor #GhostWhite
  entrySeparator #GhostWhite
}
title Snapshot Import by Follower

participant "Leader Node" as leader order 10 #Lightgreen
participant "Follower Role" as follower order 20 #Lightgreen
participant Deck as deck order 30 #Coral
participant Pilot as pilot order 40 #Lightblue
participant "State Machine" as app_state order 50 #Lightyellow
database "App Storage" as app_db order 60 #Lightyellow
database "Raft Log" as raft_log order 70 #Coral

leader -> follower: sn i=100 t=2 chunk
note right: InstallSnapshot RPC with chunk
follower -> pilot: begin_snapshot_import(i=100, t=2)
pilot -> app_state: begin_snapshot_import(i=100, t=2)
create participant "SnapShotTool" as tool order 45 #Lightblue
app_state->tool: Create
app_state --> pilot: Return SnapShotTool
pilot --> follower: Return SnapShotTool
follower -> tool: load_snapshot_chunk()
tool -> app_db: Apply chunk
loop Receive chunks
  leader -> follower: sn i=100 t=2 chunk
  follower -> tool: load_snapshot_chunk()
  tool -> app_db: Apply chunk
end
leader -> follower: sn i=100 t=2 done
follower -> tool: apply_snapshot()
tool -> app_state: Apply snapshot state
app_state --> tool: State applied
tool -> raft_log: install_snapshot(i=100, t=2)
note right: Persists snapshot, deletes logs up to i=100
follower --> leader: snr s=True
destroy tool

legend right
  <#GhostWhite,#GhostWhite>|        |= __Legend__ |
  |<#Lightyellow>| User-defined and implemented|
  |<#Lightblue>| Raft-defined, user-implemented|
  |<#Coral>| Raft Engine core|
  |<#Lightgreen>| Raft Engine internal|
endlegend
@enduml